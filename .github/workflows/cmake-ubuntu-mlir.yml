name: MLIR on ubuntu 

on:
  push:
    branches-ignore:
      - main
  pull_request:
    branches:
      - main
jobs:
  mlir-pipe-line:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3
    - name: Invoking the action 
      uses: Shuriken-Group/setup_llvm_tools@v0.0.0
      with:
        download_path: "https://github.com/llvm/llvm-project/releases/download/llvmorg-18.1.8/clang+llvm-18.1.8-x86_64-linux-gnu-ubuntu-18.04.tar.xz"
        destination: "/usr/local"
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'  # Replace with your Python version 
    - name: Install python dependencies 
      run: |
        python -m pip install --upgrade pip
        pip install lit

    - name: Setup compiler on Linux
      run: |
        sudo apt-get update
        sudo apt-get install -y libtinfo5
        # We supply the tooling for mlir project via setup_llvm_tools
        #    this includes the compiler as well as clang-tidy
        echo "CC=clang" >> $GITHUB_ENV
        echo "CXX=clang++" >> $GITHUB_ENV
    - name: Display compiler version
      run: clang++ --version
    - name: Install cmake
      run: sudo apt-get install cmake
    - name: Install git
      run: sudo apt install git
    - name: Install JDK
      run: sudo apt install default-jdk
    - name: Create build in CMake
      run: cmake -S . -B build -DGITHUB_ACTION=ON -DDEX_TESTS=ON -DMJOLNIR=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=Debug  
    - name: Build with cmake
      run: cmake --build build/ -j 4
    - name: Install with cmake
      run: sudo cmake --install build/
    - name : Run tests
      run: ctest --test-dir build/ --output-on-failure
    - name : Verify style with clang tidy 
      run: 
        # run -fix -format on your code if there is error in CI to automatically fix your code
        # Regex explanation: negative lookahead to make sure test is not in the string first
        # then we make sure that shuriken is in the string
        run-clang-tidy -use-color -p build -j 4 -quiet "^(?!.*test).*shuriken.*"
    - name: Verify shuriken-dump exit code
      run: |
        set +e # Prevent the script from exiting immediately on error
        shuriken-dump
        exit_code=$?
        set -e # Re-enable immediate script exit on error
        if [ $exit_code -eq 255 ]; then
          echo "shuriken-dump exited with the expected exit code."
        else
          echo "Unexpected exit code from shuriken-dump: $exit_code"
          exit 1
        fi
    - name: Uninstall target and verify uninstall target works
      run: |
        set +e 
        sudo cmake --build build/ --target uninstall   
        ls /usr/local/ -R | grep "shuriken" 
        if [ $? -eq 1 ]; then 
          echo "Uninstall target worked as expected"  
          exit 0  
        else  \ 
          echo "Uninstall target did not work as expected" 
          exit 1  
        fi
        set -e

