name: Build Release Package

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: '0.0.1'
  push:
    tags:
      - 'v*'  # Run when tag is pushed matching v*, e.g. v0.1.0

jobs:
  build-linux-release:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang]
    
    name: Linux-${{ matrix.compiler }}-Release
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup compiler on Linux
      run: |
        sudo apt-get update
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          sudo apt-get install -y gcc-13 g++-13
          echo "CC=gcc-13" >> $GITHUB_ENV
          echo "CXX=g++-13" >> $GITHUB_ENV
          echo "COMPILER_NAME=gcc-13" >> $GITHUB_ENV
        else
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo add-apt-repository "deb http://apt.llvm.org/noble/ llvm-toolchain-noble-18 main"
          sudo apt-get update
          sudo apt-get install -y clang-18
          echo "CC=clang-18" >> $GITHUB_ENV
          echo "CXX=clang++-18" >> $GITHUB_ENV
          echo "COMPILER_NAME=clang-18" >> $GITHUB_ENV
        fi
      shell: bash
      
    - name: Display compiler version
      run: $CC --version
      
    - name: Install dependencies
      run: |
        sudo apt-get install -y cmake git default-jdk
        
    - name: Set Release Version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "RELEASE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        else
          # Extract version from tag (remove 'v' prefix)
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        fi
        
    - name: Configure CMake
      run: |
        cmake -S . -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DGITHUB_ACTION=ON \
          -DDEX=ON \
          -DMACHO=ON \
          -DCMAKE_INSTALL_PREFIX=./shuriken-install
          
    - name: Build
      run: cmake --build build/ -j
      
    - name: Create release package structure
      run: |
        # Create installation in local directory
        cmake --install build/ --prefix ./shuriken-install
        
        # Create proper directory structure for release
        mkdir -p shuriken-${{ env.RELEASE_VERSION }}-linux-${{ matrix.compiler }}
        
        # Copy library files
        mkdir -p shuriken-${{ env.RELEASE_VERSION }}-linux-${{ matrix.compiler }}/lib
        cp -r shuriken-install/lib/* shuriken-${{ env.RELEASE_VERSION }}-linux-${{ matrix.compiler }}/lib/
        
        # Copy header files
        mkdir -p shuriken-${{ env.RELEASE_VERSION }}-linux-${{ matrix.compiler }}/include
        cp -r shuriken-install/include/* shuriken-${{ env.RELEASE_VERSION }}-linux-${{ matrix.compiler }}/include/
        
        # Add license and readme
        cp LICENSE shuriken-${{ env.RELEASE_VERSION }}-linux-${{ matrix.compiler }}/ || echo "No LICENSE file found"
        cp README.md shuriken-${{ env.RELEASE_VERSION }}-linux-${{ matrix.compiler }}/ || echo "No README.md file found"
        
        # Create a package info file with build information
        echo "Shuriken Analyzer version ${{ env.RELEASE_VERSION }}" > shuriken-${{ env.RELEASE_VERSION }}-linux-${{ matrix.compiler }}/BUILD_INFO.txt
        echo "Built with ${{ env.COMPILER_NAME }}" >> shuriken-${{ env.RELEASE_VERSION }}-linux-${{ matrix.compiler }}/BUILD_INFO.txt
        echo "Build date: $(date)" >> shuriken-${{ env.RELEASE_VERSION }}-linux-${{ matrix.compiler }}/BUILD_INFO.txt
        $CC --version >> shuriken-${{ env.RELEASE_VERSION }}-linux-${{ matrix.compiler }}/BUILD_INFO.txt
        
        # Package everything into a tarball
        tar -czf shuriken-${{ env.RELEASE_VERSION }}-linux-${{ matrix.compiler }}.tar.gz shuriken-${{ env.RELEASE_VERSION }}-linux-${{ matrix.compiler }}
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: shuriken-${{ env.RELEASE_VERSION }}-linux-${{ matrix.compiler }}
        path: shuriken-${{ env.RELEASE_VERSION }}-linux-${{ matrix.compiler }}.tar.gz

  build-windows-release:
    runs-on: windows-latest
    
    name: Windows-msvc-Release
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Developer Command Prompt
      uses: ilammy/msvc-dev-cmd@v1
      
    - name: Display compiler version
      run: cl.exe
      
    - name: Set Release Version
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "RELEASE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        else
          # Extract version from tag (remove 'v' prefix)
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        fi
        
    - name: Configure CMake
      run: |
        cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DGITHUB_ACTION=ON -DDEX=ON -DMACHO=ON -DCMAKE_INSTALL_PREFIX=./shuriken-install
        
    - name: Build
      run: cmake --build build/ --config Release
      
    - name: Create release package structure
      shell: pwsh
      run: |
        # Create installation in local directory
        cmake --install build/ --config Release --prefix ./shuriken-install
        
        # Create proper directory structure for release
        New-Item -Path "shuriken-$env:RELEASE_VERSION-windows-msvc" -ItemType Directory -Force
        
        # Copy library files
        New-Item -Path "shuriken-$env:RELEASE_VERSION-windows-msvc\bin" -ItemType Directory -Force
        Copy-Item -Path "shuriken-install\bin\*" -Destination "shuriken-$env:RELEASE_VERSION-windows-msvc\bin\" -Recurse -Force
        
        # Copy include files
        New-Item -Path "shuriken-$env:RELEASE_VERSION-windows-msvc\include" -ItemType Directory -Force
        Copy-Item -Path "shuriken-install\include\*" -Destination "shuriken-$env:RELEASE_VERSION-windows-msvc\include\" -Recurse -Force
        
        # Copy lib files if they exist
        if (Test-Path -Path "shuriken-install\lib") {
          New-Item -Path "shuriken-$env:RELEASE_VERSION-windows-msvc\lib" -ItemType Directory -Force
          Copy-Item -Path "shuriken-install\lib\*" -Destination "shuriken-$env:RELEASE_VERSION-windows-msvc\lib\" -Recurse -Force
        }
        
        # Add license and readme
        if (Test-Path -Path "LICENSE") {
          Copy-Item -Path "LICENSE" -Destination "shuriken-$env:RELEASE_VERSION-windows-msvc\"
        }
        if (Test-Path -Path "README.md") {
          Copy-Item -Path "README.md" -Destination "shuriken-$env:RELEASE_VERSION-windows-msvc\"
        }
        
        # Create a package info file with build information
        Set-Content -Path "shuriken-$env:RELEASE_VERSION-windows-msvc\BUILD_INFO.txt" -Value "Shuriken Analyzer version $env:RELEASE_VERSION"
        Add-Content -Path "shuriken-$env:RELEASE_VERSION-windows-msvc\BUILD_INFO.txt" -Value "Built with MSVC"
        Add-Content -Path "shuriken-$env:RELEASE_VERSION-windows-msvc\BUILD_INFO.txt" -Value "Build date: $(Get-Date)"
        
        # Package everything into a zip file
        Compress-Archive -Path "shuriken-$env:RELEASE_VERSION-windows-msvc" -DestinationPath "shuriken-$env:RELEASE_VERSION-windows-msvc.zip"
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: shuriken-${{ env.RELEASE_VERSION }}-windows-msvc
        path: shuriken-${{ env.RELEASE_VERSION }}-windows-msvc.zip

  create-release:
    needs: [build-linux-release, build-windows-release]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Set Release Version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "RELEASE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
        else
          # Extract version from tag (remove 'v' prefix)
          echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
        fi
        
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Display structure of downloaded files
      run: ls -R
      
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        name: ShurikenAnalyzer ${{ env.RELEASE_VERSION }}
        tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('v{0}', github.event.inputs.version) }}
        draft: false
        prerelease: false
        generate_release_notes: true
        files: |
          */*.tar.gz
          */*.zip